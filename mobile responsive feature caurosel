import React, { useState, useCallback } from 'react';
import { MessageSquareMore, LayoutDashboard, Inbox, Workflow, Timer, ChevronLeft, ChevronRight } from 'lucide-react';

const FeatureCarousel = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(null);
  const [touchEnd, setTouchEnd] = useState(null);

  const features = [
    {
      icon: <MessageSquareMore className="w-12 h-12 mb-4 text-purple-600" />,
      title: "Automated Message Replies",
      description: "Instantly respond to customer inquiries with AI-powered auto-replies"
    },
    {
      icon: <LayoutDashboard className="w-12 h-12 mb-4 text-purple-600" />,
      title: "Seamless Message Management",
      description: "Organize, track, and manage all conversations from a single dashboard"
    },
    {
      icon: <Inbox className="w-12 h-12 mb-4 text-purple-600" />,
      title: "Centralized CRM Inbox",
      description: "Efficiently handle Instagram messages within an integrated system"
    },
    {
      icon: <Workflow className="w-12 h-12 mb-4 text-purple-600" />,
      title: "Smart Workflow Automation",
      description: "Automate repetitive tasks to improve response time and efficiency"
    },
    {
      icon: <Timer className="w-12 h-12 mb-4 text-purple-600" />,
      title: "Real-Time Message Retrieval",
      description: "Instantly fetch and display messages within the app for quick responses"
    }
  ];

  const minSwipeDistance = 50;

  const onTouchStart = (e) => {
    setTouchEnd(null);
    setTouchStart(e.targetTouches[0].clientX);
  };

  const onTouchMove = (e) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };

  const onTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > minSwipeDistance;
    const isRightSwipe = distance < -minSwipeDistance;

    if (isLeftSwipe && activeIndex < features.length - 1) {
      setActiveIndex(prev => prev + 1);
    }
    if (isRightSwipe && activeIndex > 0) {
      setActiveIndex(prev => prev - 1);
    }
  };

  const handleNext = () => {
    if (activeIndex < features.length - 1) {
      setActiveIndex(prev => prev + 1);
    }
  };

  const handlePrev = () => {
    if (activeIndex > 0) {
      setActiveIndex(prev => prev - 1);
    }
  };

  const handleHover = useCallback((index) => {
    const isMobile = window.innerWidth <= 768;
    if (!isMobile) {
      setActiveIndex(index);
    }
  }, []);

  return (
    <div className="w-full max-w-6xl mx-auto px-4 py-8 md:py-12">
      <h2 className="text-2xl md:text-3xl font-bold text-center mb-8 md:mb-12 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
        Features & Benefits
      </h2>
      
      <div className="relative">
        {/* Desktop View */}
        <div className="hidden md:grid md:grid-cols-3 lg:grid-cols-5 gap-4">
          {features.map((feature, index) => (
            <div
              key={index}
              className={`transform transition-all duration-500 ${
                index === activeIndex 
                  ? 'scale-105 z-10' 
                  : 'scale-95 opacity-70'
              }`}
              onMouseEnter={() => handleHover(index)}
            >
              <div 
                className={`rounded-xl p-6 text-center bg-white shadow-lg 
                  backdrop-blur-sm cursor-pointer h-full
                  transform transition-all duration-300
                  hover:shadow-xl hover:bg-gradient-to-b hover:from-purple-50 hover:to-pink-50
                  ${index === activeIndex ? 'border-2 border-purple-400' : 'border border-gray-200'}
                `}
              >
                <div className={`flex justify-center transition-transform duration-300 ${
                  index === activeIndex ? 'scale-110' : ''
                }`}>
                  {feature.icon}
                </div>
                <h3 className="text-lg md:text-xl font-semibold mb-2 md:mb-4 text-gray-800">
                  {feature.title}
                </h3>
                <p className={`text-sm md:text-base text-gray-600 transition-opacity duration-300 ${
                  index === activeIndex ? 'opacity-100' : 'opacity-80'
                }`}>
                  {feature.description}
                </p>
              </div>
            </div>
          ))}
        </div>

        {/* Mobile View */}
        <div 
          className="md:hidden relative overflow-hidden"
          onTouchStart={onTouchStart}
          onTouchMove={onTouchMove}
          onTouchEnd={onTouchEnd}
        >
          <div 
            className="flex transition-transform duration-300 ease-out"
            style={{ transform: `translateX(-${activeIndex * 100}%)` }}
          >
            {features.map((feature, index) => (
              <div key={index} className="w-full flex-shrink-0 px-2">
                <div className="rounded-xl p-6 text-center bg-white shadow-lg h-full">
                  <div className="flex justify-center mb-4">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-semibold mb-3 text-gray-800">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600">
                    {feature.description}
                  </p>
                </div>
              </div>
            ))}
          </div>

          {/* Mobile Navigation Arrows */}
          <button 
            onClick={handlePrev}
            className={`absolute left-0 top-1/2 -translate-y-1/2 bg-white/80 p-2 rounded-r-lg shadow-md ${
              activeIndex === 0 ? 'opacity-50' : 'opacity-90'
            }`}
            disabled={activeIndex === 0}
          >
            <ChevronLeft className="w-6 h-6 text-purple-600" />
          </button>

          <button 
            onClick={handleNext}
            className={`absolute right-0 top-1/2 -translate-y-1/2 bg-white/80 p-2 rounded-l-lg shadow-md ${
              activeIndex === features.length - 1 ? 'opacity-50' : 'opacity-90'
            }`}
            disabled={activeIndex === features.length - 1}
          >
            <ChevronRight className="w-6 h-6 text-purple-600" />
          </button>
        </div>

        {/* Progress Indicators */}
        <div className="flex justify-center mt-6 gap-2">
          {features.map((_, index) => (
            <button
              key={index}
              onClick={() => setActiveIndex(index)}
              className={`w-2 md:w-3 h-2 md:h-3 rounded-full transition-all duration-300 ${
                index === activeIndex 
                  ? 'bg-purple-600 w-4 md:w-6' 
                  : 'bg-gray-300 hover:bg-purple-400'
              }`}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default FeatureCarousel;
